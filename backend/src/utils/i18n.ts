import { AppDataSource } from "../config/database";
import { User } from "../entities/User";

export type Lang = "ru" | "uz";

const fallbackLang: Lang = "ru";

export const langNames: Record<Lang, string> = {
  ru: "–†—É—Å—Å–∫–∏–π",
  uz: "O‚Äòzbekcha",
};

const messages: Record<Lang, any> = {
  ru: {
    start: {
      welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!",
      menuHint: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
    },
    help: {
      text:
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
        "/order ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n" +
        "/register ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n" +
        "/language ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
    },
    menu: {
      order: "üöö –ó–∞–∫–∞–∑–∞—Ç—å —ç–≤–∞–∫—É–∞—Ç–æ—Ä",
      register: "üìû –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
      language: "üåê –Ø–∑—ã–∫",
    },
    lang: {
      choose: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
      set: "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {langName}",
      name: { ru: "–†—É—Å—Å–∫–∏–π", uz: "O‚Äòzbekcha" },
    },
    register: {
      askPhone: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
      askPhoneButton: "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
      saved: "–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!",
      invalidPhone:
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º.",
    },
    order: {
      noDrivers: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      chooseDriver: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
      askPickup: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –ø–æ–¥–∞—á–∏ (–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç).",
      askPickupButton: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
      askDropoff: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç).",
      creating: "–°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É...",
      created: "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ù–æ–º–µ—Ä: #{id}. –°–ø–∞—Å–∏–±–æ!",
    },
    payment: {
      successCb: "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞",
      method: { cash: "–ù–∞–ª–∏—á–Ω—ã–µ", card: "–ö–∞—Ä—Ç–∞" },
      updatedMsg: "–û–ø–ª–∞—Ç–∞: {amount}, —Å–ø–æ—Å–æ–±: {method}",
    },
    admin: { usersCount: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {count}" },
    errors: { common: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." },
    generic: { thanks: "–°–ø–∞—Å–∏–±–æ." },
  },
  uz: {
    start: {
      welcome: "Xush kelibsiz, {name}!",
      menuHint: "Quyidagi amalni tanlang.",
    },
    help: {
      text:
        "Mavjud buyruqlar:\n" +
        "/start ‚Äî bosh menyu\n" +
        "/order ‚Äî buyurtma yaratish\n" +
        "/register ‚Äî telefon raqamini qoldirish\n" +
        "/language ‚Äî tilni o‚Äòzgartirish",
    },
    menu: {
      order: "üöö Evakuator chaqirish",
      register: "üìû Telefon raqamini qoldirish",
      language: "üåê Til",
    },
    lang: {
      choose: "Tilni tanlang:",
      set: "Til o‚Äòzgartirildi: {langName}",
      name: { ru: "–†—É—Å—Å–∫–∏–π", uz: "O‚Äòzbekcha" },
    },
    register: {
      askPhone: "Iltimos, telefon raqamingizni yuboring yoki pastdagi tugmani bosing.",
      askPhoneButton: "üì± Telefonni yuborish",
      saved: "Raqam saqlandi. Rahmat!",
      invalidPhone:
        "Telefon raqamini aniqlab bo‚Äòlmadi. Kontakt yuboring yoki raqamni matn bilan yozing.",
    },
    order: {
      noDrivers: "Hozircha haydovchilar yo‚Äòq. Keyinroq urinib ko‚Äòring.",
      chooseDriver: "Haydovchini tanlang:",
      askPickup: "Jo'nash manzilini yuboring (joylashuv yoki matn).",
      askPickupButton: "üìç Joylashuvni yuborish",
      askDropoff: "Boriladigan manzilni yuboring (joylashuv yoki matn).",
      creating: "Buyurtma yaratilmoqda...",
      created: "Buyurtma yaratildi. Raqam: #{id}. Rahmat!",
    },
    payment: {
      successCb: "To‚Äòlov qabul qilindi",
      method: { cash: "Naqd", card: "Karta" },
      updatedMsg: "To‚Äòlov: {amount}, usul: {method}",
    },
    admin: { usersCount: "Tizimdagi foydalanuvchilar: {count}" },
    errors: { common: "Xatolik yuz berdi. Keyinroq urinib ko‚Äòring." },
    generic: { thanks: "Rahmat." },
  },
};

function deepGet(obj: any, path: string): string | undefined {
  return path.split(".").reduce<any>((acc, key) => (acc == null ? undefined : acc[key]), obj);
}

function applyParams(text: string, params?: Record<string, any>): string {
  if (!params) return text;
  return text.replace(/\{(\w+)\}/g, (_, k) => (params[k] != null ? String(params[k]) : ""));
}

export function resolveLangCode(code?: string): Lang {
  const v = String(code || "").toLowerCase();
  if (v.startsWith("uz")) return "uz";
  if (v.startsWith("ru")) return "ru";
  return fallbackLang;
}

export async function getUserLanguageByTelegramId(telegramId: string): Promise<Lang> {
  try {
    const repo = AppDataSource.getRepository(User);
    const user = await repo.findOne({ where: { telegramId } });
    return (user?.language as Lang) || fallbackLang;
  } catch {
    return fallbackLang;
  }
}

export async function setUserLanguageByTelegramId(telegramId: string, lang: Lang): Promise<void> {
  const repo = AppDataSource.getRepository(User);
  await repo.update({ telegramId }, { language: lang });
}

export async function t(ctx: any, key: string, params?: Record<string, any>): Promise<string> {
  const lang = await getUserLanguageByTelegramId(String(ctx.from?.id || ctx.chat?.id || ""));
  const raw = deepGet(messages[lang], key) || deepGet(messages[fallbackLang], key) || key;
  return applyParams(String(raw), params);
}

export function getLangName(lang: Lang): string {
  return langNames[lang] || String(lang);
}

